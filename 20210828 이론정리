<< 2021.08.28 TIL >>

comment :  html, css 프론트엔드 개발자로서 가장 기초적인 과목이기도 하지만, 가장 기본이되는 과목이기도 하다.
경험을 했지만서도 리액트, 리덕스 등 현업에서 이러한 라이브러리를 공부하는 것에도 시간이 부족하기 때문에
나중에 html, css에서 발목잡히지 않으려면 지금 열심히 해두자라는 마인드 숙지!

About HTML
1) HTML 이란 ? Hyper Text Markup Language(하이퍼 텍스트 마크업 언어)
-> 보통 프로그래밍 언어는 데이터를 받고, 그 데이터를 가지고 특정한 액션을 명령하는 언어인데,
이와 달리, 마크업 언어는 웹문서의 웹 요소 하나하나의 역할, 위치 등을 정의, 규정 해주는 역할을 한다.
또한, 여기서 하이퍼 텍스트 자체가 웹문서를 이루는 웹요소 하나하나를 말하고, 따라서, 이를 마크업하는 언어라고 해서
HTML은 웹문서의 웹요소 하나하나에 대해 역할 규정 및 큰 구조적인 위치 정의 등의 역할을 하는 언어라고 할 수 있다.
건축으로 예를 들면, HTML은 큰 구조를 짜는 설계도와 같다. 이 설계도에는 컬러, 세세한 크기 및 위치 조정 등에 대한 정보는 없지만,
특정 건물의 대략적인 구조, 몇층으로 됐고, 이 층의 역할은 무엇이고 등등을 정의해놓는 설계도와 같이 큰 구조를 적어놓는 설계도이다.

2) 브라우저란? Browser 
-> 사실 우리가 매일매일 쓰곤 하는 이 브라우저는(예를 들어, 크롬, 파이어폭스, 인터넷 익스플로러, 사파리 등) 다양한 기능을 가지고 있지만,
가장 핵심적인 기능은 앞서 말한 html 파일을 읽을 수 있는, launcher와 같은 기능을 한다. 예를 들어, docx 확장자 파일을 
열어보기 위해서 우리는 ms word 등의 런처를 이용해서 그 파일을 열어서 실제로 시각적으로 볼 수 있게 된다.
이처럼, 브라우저는 html 확장자 파일을 브라우저 화면상에 렌더링해서 우리에게 html에 정의된 요소를 보여준다.
이외에도 브라우저는 사용자에게 편의를 제공하는데, 즐겨찾기 및 북마크 기능, uri 검색 기능 등을 제공하고, 개발자에게도
예를 들어 맥북에서 option + command + i를 누르면 나오는 개발자도구와 같은 기능을 제공하기도 한다.
이 개발자 도구는 개발자에게 매우 중요한 기능인데, 현재 브라우저에 렌더링된 페이지의 html 파일을 볼 수도 있고,
콘솔창에 js 코드를 쳐서 해당 html파일 임시적으로 조정해볼 수 있다. 예를 들어, 현재 브라우저에 렌더링된 페이지의
특정 버튼의 클래스명이 'nav_bar'일 때, DOM모델을 이용해서 nav_bar의 색깔을 바꿔볼 수도 있고, onClick event도 걸어볼 수 있다.
물론 브라우저가 특정 서버로부터 받아온 파일의 원본을 고치는 것이 아니라 일시적이지만, 유용하게 활용할 수 있다.

3) HTML, CSS, JS 각각의 역할 정리
- HTML : 위에서 말헀듯이 HTML 은 웹요소 하나하나에 대해서 역할 및 위치 등을 정의하는 마크업 언어이다.
마크업 언어는 프로그래밍 언어와 달리 ~해라의 명령이 아닌 역할 등의 '정의'를 위해 쓰는 언어라고 할 수 있다.
이러한 HTML은 흔히 건물의 뼈대 부분에 비유되곤 한다. 아직 색깔(CSS) 혹은 입주자(?)와의 인터랙션(JS) 등이 없는 단순 골격에 비유가능하다.
따라서 HTML로는 뭔가 예쁜 것(?)을 만드려하기보다는 튼튼한 구조, 잘잡힌 구조를 짜는 것에 집중해야한다.
- CSS(Cascading Style Sheets) : HTML로 대략적인 전체 골격 및 뼈대를 잡았으면, 실제로 거기에 색깔과, 디테일한 위치 조정 및 특색을 부여해야한다. 
또 건물에 비유해보면, 집집마다 다른 인테리어를 생각할 수 있다. 처음에 제공된 A오피스텔 건물의 뼈대 및 골격은 모든 입주자에게 동일했지만,
각자의 개성있는 인테리어로(인테리어가 자유롭다는 가정) 그 골격이 큰틀에서는 변하지 않겠지만, 세부적으로 벽을 허물수도 있고, 색깔을 입히고,
특정 방에 또다른 벽을 만들어서 2개로 쓰기도 하는 등의 인테리어를(CSS)하게 되는 것처럼 CSS를 통해 HTML로 짜놓은 뼈대에
실제 색깔을 입히고, 특수 효과를 주고, 세부적인 위치 조정 등을 할 수 있다. 
- JS : 마지막으로, JS를 통해 유저와의 인터랙션을 설정할 수 있다. HTML, CSS로 만든 페이지는 우리가 흔히 아는 나무위키 페이지와 같이
정적인 페이지라고 할 수 있다. 뭔가를 클릭하면 다른 페이지가 나오기는 하지만, 특정 버튼을 누르면 버튼이 오른쪽으로 1px 움직인다던지,
로그인 버튼을 누르면 alert 창이 뜬다던지, 유저의 특정 행동(A)에 따라서 그에 적합한 반응(B)를 리턴해줄 수 있는 것이 JS이다.
아까 건물을 예로 들면, 실제로 예쁘게 꾸며진 화장실에서 입주자가 수도꼭지를 틀면(행동) 물이 나오는(그에 맞는 반응) 것에 비유할 수 있다.

위에서 설명한 세가지의 역할을 구분해서 알아둘 필요성이 있다!
실제 경험해본 것이지만, 하나의 html파일에 서로 다른 css파일을 적용해서
프레임은 같지만, 전혀 다른 레이아웃을 만들 수도 있고(반응형도 그에 해당하는 예시)
역으로 css파일은 같지만, 다른 레이아웃을 가진 두개의 html에 이를 적용시켜서 사용할 수도 있다.
이러한 역할 구분은 나중에가면 유지/보수, 확장성, 생산성에 기여하는 바가 크므로 확실히 알아두고 가야한다.
웬만하면 서로의 역할을 침해하지 않는 방향으로 하는 것이 좋다.

4) 웹표준, 웹접근성, 웹호환성 관련 정리
- 웹표준 : 개발을 하다가 safari로 개발한 페이지를 열어보고, chrome으로 페이지를 열어보면, 미세한 차이가 있을 때가 있다.
예를 들어, 버튼 태그를 생각해봤을 때, fireFox의 버튼 모양과 safari의 버튼 모양, 크롬의 버튼 모양간에는 미세한 차이가 있다.
그러나, 이 세가지 모두다 웹 표준을 지킨 형태라고 할 수 있다. 일단, 웹표준은 웹접근성을 위한 개념인데, 이러한 웹표준이 잘지켜져야
웹접근성에 있어서 수월하게 된다. 그리고 이 웹표준은 일종의 규칙 혹은 법과 같은 것이다. 상식적으로 법을 지키지 않으면 모두가 자기 자신만의 생각으로
행동을 할 것이고, 그러면 소통이 원활하지 않게 된다. 누구는 사과를 과사라고 부르고, 누구는 호과라고 부르면서 규칙을 무시한다면
과일장수는 사과를 달라는 말을 알아듣지 못하게 된다. 이러한 비유처럼 웹표준을 지키지 않으면, 웹브라우저를 통해 렌더링된 사이트를 브라우징할 때
유저가 위의 과일장수처럼 당황하게 된다. 예를 들어, img 태그에 alt 속성을 쓰는 것은 웹 표준이다. 이는 시각장애인분들이 웹브라우징을 할 때
이미지를 읽어주는 기능을 제공하는데, 그 때 읽는 부분이 alt속성에 쓰여진 부분이다. 그러나, 이러한 웹표준을 지키지 않으면
웹접근성이 떨어질 수 밖에 없다. 모두가 특정 사이트에서 평등하게(?) 그 사이트를 이용할 수 있으려면 웹표준이 지켜져야 하는 것이다.
맨앞의 예시와 같이 버튼 태그의 모양이 조금은 달라도 우리는 버튼을 누르면 어떤 액션이 취해지는 것을 안다. 그래서 눌러본다. 하지만,
만약 버튼이 우리가 흔히 아는 검색창의 text input처럼 생겼다면 우리는 그것을 어떻게 쓰는지 모를 것이다. 이러한 것들을 표준화해서
웹브라우징의 접근성을 높이는 것이 웹표준이다. 본래 2014년에 비영리 단체인 W3C에서 제정을 했지만, 2019년에 WHATWG 라는 영리단체에서
W3C에 개선안을 제공했고(HTML Living Standard) 현재 우리가 HTML5로 알고 있는 웹표준은 그 때 제정된 것이다.
- 웹접근성 : 위에서 이미 설명을 했지만, 웹접근성은 정상적인 웹 콘텐츠 사용이 가능한 일반 사용자부터 고령자, 장애인 같은 신체적, 환경적 조건에 제한이 있는 사용자를 포함해 모든 사용자들이 동등하게 접근할 수 있는 웹 콘텐츠를 제작하는 방법을 말한다.
유저에게 평등한 UX를 제공하는 것이라고 할 수도 있는데, 누가와서 이 페이지를 브라우징해도 다른 유저에 비해 부족함 없는 경험을 주기위한 것이다.
예를 들어, 시력이 안좋은 분들에게도, 혹은 마우스가 없어도, 쓸 수 있는 혹은 서버가 조금 느릴 때에도 편안한 브라우징을 제공하기 위함이다.
- 웹호환성(Cross Browsing) : 웹표준을 지킨 코드를 사용함으로써 어떤 브라우저(크롬, 파이어폭스, 사파리 등)에서 페이지를 열어도 깨지지않는 호환성을 말하는 것이다.
이 때, 브라우저마다 렌더링 엔진이 다르기 때문에 크로스 브라우징 작업이 필요하다. 개발을 하다보면 분명 크롬에서는 잘나오던 것이 internet explorer로 켜면 안나오는 경우가 있다.
이런 경우를 위해(이렇게 호환이 안되는 경우를 위해) 크로스 브라우징 작업이 필요한 것!. 현재 가장 많은 점유율을 가진 브라우저는 구글이 만든 크롬이지만,
아직까지 다양한 브라우저와 인터넷 익스플로러는 다양한 버전..ㅎ(이제는 그럴일이 없지만)이 쓰이고 있다. 이에 따라 개발자들은
이러한 모든 브라우저에 호환되는 개발을 하기위해 크로스 브라우징 작업이 필요하다.
그러나, 실질적으로 웹표준을 지키면 무조건 크로스 브라우징이 되는 것은 아니다. 예를 들어, grid와 같은 css 레이아웃 기능을 아예 지원하지 않는 브라우저 혹은 특정 버전이 있다.
이런 경우에는 W3C 규정을 지켜도 브라우저 자체가 지원을 안하기 때문에 호환성을 보장할 수 없다. 이러한 경우를 위해 특정 사이트에서는 특정 브라우저가 특정 기능을 지원하는지 여부를
알려준다고 한다(https://caniuse.com/) 이러한 사이트를 참고해서 크로스 브라우징을 고려해야할 것 같다.


4) 실습환경 세팅

- vsCode 관련 유용한 extension추천 : 
# auto rename tag(앞 태그를 바꾸면 뒤태그도 자동으로 바뀌는 기능), 
# live server(로컬서버로 웹 페이지를 띄워서 수정 사항이 바로 반영되도록 하는 것)
# prettier(자주 써봤지만, 들여쓰기 등 말그대로 prettier하게 코드 배치 등을 조정해줌)

- vsCode 관련 단축키
# ctrl + w(command + w) : 현재 창을 닫음
# ctrl + shift + t(command + shift + t) : 위에서 닫은 창을 잘못닫은 경우 다시 열어줌
# ctrl + shift + f(command + shift + f) : 전체 검색 
# ctrl + shift + e(command + shift + e) : exlorer(파일 탐색파트로 이동)
# ctrl + (+) : 에디터 확대
# ctrl + (-) : 에디터 축소
# ctrl + b(command + b) : 사이드바 열고 닫기
# command + ] : 전체 행 자체를 들여쓰기함(탭키는 마우스 커서부터 들여쓰기 되지만)
# ctrl + enter (command + enter) : 윗문장에서 작업하다가 띄어쓰기 혹은 끝으로 가는 과정없이 바로 아래줄로 가고싶을 떄
# ctrl + shift + enter (command + shift + enter) : 아래문장에서 작업하다가 띄어쓰기 혹은 끝으로 가는 과정없이 바로 위줄로 가고싶을 떄
# Alt + 위아래 방향키 : 현재 행을 이동시킴
# command + shift + k : 현재 행 삭제
# command + shift + 방향키 : 현재 행 복사 
# ctrl + /(command + /) : 주석 토글(주석 문법 하나하나 타이핑할 필요없음!






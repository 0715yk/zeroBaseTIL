1) div 태그
- 블록요소
- div 태그는 아무런 의미를 갖지 않음. div 태그 자체로는 아무것도 의미하지 않음!
그룹화, 컨테이너 용도로 쓴다.
- 주로 레이아웃을 짤 때 쓴다.
- 의미가 없을 때에만 써야한다.

2) span 태그 
- div 태그와 같이 의미가 없는 태그 
- 인라인 요소를 그룹화, 컨테이닝할 때 씀 
- div 태그와 차이는 인라인 요소라는 것 
- 본인만의 속성이 없다. 

3) semantic web(header, article, nav, main etc..) vs non semantic web(only div & span)

- 둘의 렌더링 아웃풋 차이는 전혀 없음. 즉, 기능은 똑같이 작동한다는 것
- 그러나, 왜 굳이 시맨틱(의미의, 의미론적인) 웹을 작성해야할까? 
# 검색엔진 최적화에 도움이 됨. 아무런 의미가 없는 것이 특징인 div, span태그를 쓰는 것보다는
header 등의 의미가 있는 태그를 씀으로써 검색엔진이 정보를 찾을 떄 좀더 유형화하기 쉽게 만들어주는 편이 검색엔진 최적화에 더 좋다
(즉, 검색 키워드에 매칭되기 쉽다!)
# 역시, 스크린 리더 쪽으로 도움이 된다. 이 웹 페이지의 전체 구조를 먼저 보고 브라우징을 할 수 있음. 
메인이 어디있고, 그 메인에 뭐가 있는지, 어디까지가 본문인지 등을 알고 브라우징 할 수 있다는 것!(웹접근성 측면)
# 개발자 입장에서 시맨틱 웹이 훨씬 가독성이 좋음. 당연한 부분이 의미가 없이 만든 것보다는 의미가 있는 요소로 만든 것이 훨씬
가독성이 높음 
# 만약 개발자들끼리 협업을 할 때, 시맨틱 요소만 보고도 분업 내용이 뭔지 예측할 수 있음. 
=> 내가 맡은 부분이 nav다 하면 나는 메뉴바 혹은 햄버거 메뉴 등을 만들겠구나 등등
# 그러나, 1:1 매칭이 100%되지는 않을 것! 그래서 최대한 맞춰보려고 노력해야함.
# div, span을 남발해서는 안되고, div로 묶어봤더니 공통분모가 보이면 => 시맨틱 태그로 ! 하는 노력 

4) header & footer 
- header : 소개 및 탐색에 도움을 주는 컨텐츠 (제목, 로고, 검색폼, 작성자 이름 등)
ex)최상단 부분이 주로 header임 (header는 전체 웹페이지에서 하나만 써야함)
헤더는 대부분 fixed되어있음. 어느 페이지에서도 똑같이 보인다는 것
- header 내에 header, footer는 넣을 수 없음
- 글제목, 페이지 제목 등을 쓰기도 함 
- footer : 이 웹페이지를 작성한 사람, copyright 등의 정보
- header와 같이 footer 내에 header, footer 넣을 수 없음 

5) nav 
- 다른 페이지로의 링크, 현재 페이지 내에서의 탐색을 용이하게 해주는 부분!
- 네비게이션 바를 예로 들 수 있음
- 보통 목록의 형태를 띄고있음(li태그)
- 현재 페이지를 기준으로 이동하는 부분이 큼(footer는 절대적인 경로임. 제작 사이트 등 현재 페이지랑은 별도의 경로)

6) aside
- 본문과 크게 직접적으로 연관은 없지만, 간접적으로 연관된 부분!
- 광고와 같은 영역
- 메인 콘텐츠가 아닌 부분으로, 추가적인 정보를 담는 부분(없다고 해서 문제가 생기지 않는)
- '부가적'인 정보!

** 다시 말하지만, 시맨틱 태그와 div, span 태그의 기능은 같음
aside 태그라해서 자동으로 옆에 위치시켜주지 않음!

7) main  
- 말그대로 주된 콘텐츠가 들어가는 영역으로 body태그의 바로 아래 영역으로 페이지에 하나만 써야함(표준).
- 만약 두,세개를 쓰려면 hidden이란 속성을 써서 안보이게 해야함 
- 다른 태그의 자식으로 쓸 수 없음
- internet explorer 11 이하에서는 지원을 안하기 때문에 
쓰려면 <main role="main"></main> 이런식으로 써야함 
- main 태그는 주요 컨텐츠들(article, h1등)을 아우르는 영역임

8) article 
- 독립적으로 구분해 배포가능하거나 재사용 가능한 것. 그 자체로 의미가 있는 독립적인 콘텐츠
- 그 자체로 의미가 있는 것을 article로 씀
- section안에 여러개의 article 이 있을 수 있고, 
- 댓글창 안에 댓글 하나하나가 article이 될 수도 있음.
- 보통 article에 heading 태그로 제목을 줌 (이 안에 footer, header도 넣을 수 있음)

9) section 
- article과 유사한데, section은 article만큼 독립적이지 않음.
- article은 앞서 말했듯이 따로 떼어내서도 독립적인 의미를 지니지만,
section은 주변에 다른 section 혹은 다른 article과 연관 속에서만 의미를 지니기에 독립적이지 않음
- heading 태그를 써서 제목을 붙이기도 함.

** 시맨틱 태그는 어떤 의미를 강조하는 역할임
div, span이 의미가 없다는 점 => 레이아웃 용도
시맨틱 태그는 의미가 있다는 점에서 레이아웃보다는 실제로 강조, 의미를 주고 싶을 때 쓰는 것(의미가 확실하게 분류되고, 분류시키고 싶을 때)

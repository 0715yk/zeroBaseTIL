1) heading tag(h tag)
- 블록 요소
- h1 ~ h6까지 있는 heading 태그는 제목을 마크업할 때 쓴다.
- 이 때, h1>h2>....>h6 순으로 중요도, 크기가 결정된다
- html5에서 권장하는 사항으로 h1은 한개만 쓰는 것이 좋다. 검색엔진 최적화에도 h1을 구체적으로 적는게 도움이 되는데,
검색 시에 h1 부분에 검색 매칭의 중요도가 높기 때문이다.
- heading 태그는 시력이 안좋으신 분들의 스크린 리더의 목차로도 쓰이기 때문에 그 순서를 지켜주는 것이 좋다(역순으로 쓰는 것 등은 지양)
- 글씨 크기가 조절된다해서 heading tag를 그러한 용도로 쓰지 않기를 권장함(css를 쓰면 되니까).

2) p tag
- 블록요소(컨테이너 역할)
- 하나의 문단을 나타내는 태그 
- ** tip : 평소에 p태그 등에 테스트로 넣어보는 긴 문장 lorem?으로 시작하는 그..ㅎ 그거 인터넷에서 복붙 안해도 되고,
vscode에서 지원해준다고함. lorem 치면 바로 자동완성됨
- 여백을 위해 p태그를 쓰지말기(p tag가 블록요소라서 새로운 라인에서 시작하고, 한줄을 다 차지하는 특성이 있는데 그것을 그런용도로 쓰지 말라는 것)
- 내부에 블록요소를 넣으면 자동으로 p tag가 닫히는 특성이 있음

3) br 태그 
- 줄바꿈 태그 
- html에서는 엔터를 친다고 줄이 바뀌지 않음!(파이썬의 '\n'과 같음)
- 빈요소라서 닫힌태그 필요없음!
- 문단과 문단 사이를 벌리기 위해서 <br>태그를 많이 쓰면 안됨!(margin-top을 쓰던지, 내용이 없는 div태그를 만들어서 min-height를 주던지 등의 방법을 써야할듯)
- 문단과 문단 사이에는 <br> 사용 지양! => 스크린 리더를 쓰시는 분들에게도 안좋은 영향을 줌
두 문단이 연관되어 있음을 알리는 것에 방해를 함. 애초에 p태그 자체에 디폴트 margin값이 들어가므로(블록요소 기본 특징)
그것을 통해 둘 사이를 벌리거나 더 벌리고 싶다면 위에서 말한 것처럼 margin-top을 이용하면됨.

4) blockquote & q 태그 
- 둘다 인용문을 쓸 때 쓰는 태그로 "이런식으로" 어떤 글을 가져온다던지, 제작자가 말하는 것이 아닌 인용문을 표시할 때 쓰는 태그이다. 
- blockquote는 블록요소이고, q태그는 인라인 요소라는 점에서 차이가 있다.
- p tag 안에 blockquote를 쓸 수 없다. 이유는 p tag가 안에 블록요소를 넣으면 자동으로 닫히는 속성이 있기 때문임.
하지만 q 태그는 인라인 요소이기 때문에 쓸 수 있다.
- 둘다 cite 속성을 줄 수 있다. url 정보 등을 넣는

5) pre 태그(미리의 pre)
- 미리 형식이 정의되지 않아서 있는 그대로 output을 보이게 하고 싶을 때 씀. 예를 들어, br, &nbsp; 등을 안써도
본래 스페이스와 엔터 효과가 그대로 결과물에 적용됨(개행, 스페이스 등이 일반 UX처럼 적용된다는 것)
- 텍스트를 고정폭 글꼴로 표현함. 예를 들어, AAAAA 를 쓰는 것과 IIIII 쓰는 것은 전체 폭이 다를 수 밖에 없음.
그러나, pre로 하면 둘의 폭이 동일하게 됨(고정폭 글꼴/ 가변폭 글꼴) 실제로 p 태그로 IIIII썼을 때와 pre태그에 썼을 때가 다름!!

6) figure 태그 
- p, img, blockquote 등을 감싸서 쓸 수 있음 
- figcaption을 써서 설명문을 붙일 수 있음(필수는 아님)
- 하나의 연관성으로 묶인 것으로 표현해줄 수 있는 태그 
- 블로깅할 때 이미지와 캡션처럼 둘의 연관성을 표현할 수 있도록 해줌
- 연관성 있는 요소를 덩어리로 하나로 묶어서 표현해줄 때 쓰는 태그로 이해하면 될듯 (큰 효과는 없음) 

7) hr 태그 
- 줄을 긋는 효과를 주는 태그
- 빈요소 
- 주로 css요소를 써서 사용함 

8) abbr(abbreviation)
- title 속성을 주고, 콘텐츠로 약어를 써주고, 그 약어에  마우스를 hover하면 타이틀이 보여짐

9) address
- 주소를 가리키는 태그(자동으로 이탤릭체로 변함)
- 위에서 heading 태그에서 했던 말처럼 italic체를 쓰려고 address 태그를 쓰는 것은 지양(위에 abbr도 마찬가지)

10) cite 태그 
- figure태그의 cite속성과 비슷한 목적으로 쓰이는 태그이지만, 속성은 안보이고, 이 태그는 실제 보임
- 자동으로 기울임꼴이 나옴
- 그러나, 8,9,10 모두 브라우저 디폴트값에 따라 변하는 모양이 다름!

11) bdo(bidirectional override)
- 텍스트를 반대방향으로 쓸 떄 쓰는 태그 
- 파이썬의 string.reverse()와 같은 
- dir 속성에 ltr(left to right), rtl(right to left) 속성을 줘서 다시 원래대로 돌릴 수도 있고, 반대로 할 수도 있음

12) b, strong 포매팅 태그 
- 먼저, b태그는 우리가 필기할 때 밑줄치는 단어와 같은 중요도가 높은 부분에 써주면 된다(볼드체로 바뀜)
- strong은 높은 중요도를 가진 부분에 씀(눈에 띄어야하는 부분)
- b vs strong : 앞뒤 내용에 비해 매우 중요한게 확실하다하면 strong, 그냥 볼드를 쓰고 싶으면 b 
- 그러나, b태그로 문단 전체를 감싸거나 이러면 안됨. 스타일 용도로 쓰면 안됨!. 스타일 용도는 css로!
- 전체적으로 보면 html의 구획용 태그가 아닌 그 자체로 의미가 있는 이런 태그들은 대부분 의미론적인 접근으로 쓰는 것 같다(스크린 리더 등에 쓸 목적도 포함)
- 실제 예시로 스크린 리더는 b태그 부분을 그냥 읽지만, strong부분은 예를 들어, 안경을 일 때, 안.경.을 이렇게 읽는다고 한다

13) i / em 태그
- 둘다 이탤릭체로 보이게하는 효과를 주지만, 12번처럼 둘은 아예 의미론적으로 다름
- i는 어떤 이유로 주변과 구분해야하는 부분에 씀. 쭉 읽다가 변한 느낌을 주기위해
- em 은 강세를 주기 위해 씀. 강조해서 읽히도록. 스크린 리더에서도 강조해서 읽음. 
- em과 strong은 다른게, strong은 매우 중요한 부분의 의미인데, em은 강세, 뭔가 변화를 줘서 읽어야하는 부분에 쓰는 것

14) mark, small, sub, sup
- mark : 필기할 때 중요한부분에 밑줄 긋는 효과와 같이 말그대로 밑줄을 그어줌(형광펜처럼) : 중요 부분 강조 용도(이것도 브라우저별로 스타일이 다르니까 의미론적으로 써야함)
** 스크린 리더가 읽지는 못함!!
- small : 덧붙이는 요소 혹은 주석, 저작권 등에 대한 내용 등을 표시하기 위함으로 작게 표현함.
- sup(위첨자), sub(아래첨자) : 지수 등을 표기할 때 sup 태그 사용 !, 혹은 th 등 쓸 때, 그리고 아래첨자 쓸 때, 예를 들어, 화학식 혹은 각주를 쓸 때 sub를 씀

15) del & ins
- 제거된 텍스트의 범위를 나타낼 때 그리고 추가된 텍스트의 범위를 나타낼 때 각각 del, ins를 씀 
- 브라우저에 따라 스타일링이 다름!(모든 html은 스타일링 용도가 되어선 안됨!)
- cite 속성 : 어떤 이유 어떤 시점에 삭제, 추가됐는지 써주는 용도 
- 스크린 리더가 읽지는 않음 

16) code  태그 
- 말그대로 프로그래밍 언어와 같은 코드들을 표기할 때 쓰는 태그 
- pre 태그로 감싸주면 더욱 용이하게 쓸 수 있음. 

17) kbd 태그 
- 키보드의 버튼을 표시할 때 쓰는 태그 

18) a 태그(anchor)
- 다른 곳으로 이동시켜주는 태그 (하이퍼링크 같은 것)
- href 속성에 이동시킬 위치를 적어준다
- 절대 경로 & 상대 경로 : 절대 경로는 현재 위치랑 관련없는 경로로 그 위치 자체, 다른 것과 상대적인 위치가 아닌 그 위치 자체를 말함
상대경로는 다른 것과 연관시켜서 적어주는 경로로, 현재 위치를 기준으로 찾고자하는 경로의 위치를 명시해줌.
- target 속성 : 목적지를 어디에 띄울지. 기본값은 _self로 현재 페이지에 열림(자동으로 현재 페이지는 사라짐)
- 그러나, _blank로 해주면 새창열기가 됨. 

19) Entity 
- <, >, &, " 는 예약어로도 불리고, html의 구문 자체의 일부임. 우리가 흔히 아는 용도가 아닌 html 구문 자체의 일부라는 것. 
- 그래서 위의 문자를 우리가 원하는 용도로 쓰려면 별도의 처리를 해줘야하고, 그것이 entity임
# &lt; (less than) : 부등호 기호 <
# &gt; (greater than) : 부등호 기호 > 
# &quot; : "
# &apos; : ' 
# &amp; : &
# &nbsp; : ' ' (공백하나) = nonbreaking space
=> 위와 같은 것을 엔티티라고 하고, 쓸 때마다 필요한 것 찾아서 쓰면됨! 위에정도는 외우고!


=> 여태까지 적은 텍스트 요소들을 통해서 웹문서(html)의 요소인 hyper text를 마크업할 수 있다. 
다양한 기능을 가진 태그들이지만, 대부분 의미론적인 측면에서 접근해서 써야할듯 하다.
스크린 리더 등에서 어떻게 읽힐지 등을 고려하는 등 외적인 변화를 위한 기능보다는 
마크업 언어 답게 이것이 무슨 의미인지, 무슨 목적으로 쓰였는지를 명확히 하는 용도로 쓰고, 디자인적인 요소는 css로!